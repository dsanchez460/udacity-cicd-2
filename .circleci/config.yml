version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            # Delete front- and back-end stacks
            aws cloudformation delete-stack --stack-name frontend-<< parameters.workflow_id >>
            aws cloudformation delete-stack --stack-name backend-<< parameters.workflow_id >>

            # Force removal of S3 buckets, even if it's not empty
            # (see https://docs.aws.amazon.com/AmazonS3/latest/dev/delete-or-empty-bucket.html)
            aws s3 rb s3://udapeople-<< parameters.workflow_id >> --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    #parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=`curl -H "token: ${CIRCLE_WORKFLOW_ID}" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}`
            if(( ${SUCCESS}==1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

orbs:
  slack: circleci/slack@4.2.0

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Build back-end
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Test front-end
          command: |
             # Your code here
             cd frontend
             npm install
             npm run test
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1
             
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Test back-end
          command: |
             # Your code here
             cd backend
             npm install
             npm run test
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-build]
      # Your job code here
      - run:
          name: Scan front-end
          command: |
             # Your code here
             cd frontend
             npm audit --audit-level=critical
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Scan back-end
          command: |
             # Your code here
             cd backend
             npm audit fix --audit-level=critical --force
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run: yum -y install tar gzip # required to persist to workspace
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend-infrastructure \
              --stack-name "backend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend-infrastructure \
              --stack-name "frontend-${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Project,Values=udacity" \
            --output text > inventory.txt
            pwd
            ls
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt

#          root: .circleci/ansible
#          paths:
#            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["53:ed:0d:b2:e2:aa:fa:ec:8b:bd:af:c4:d6:6e:f8:d8"]
      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update ansible
            apk add tar
            apk add gzip
            pip install awscli
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          no_output_timeout: 15m
          command: |
            # Your code here
            #cd .circleci/ansible
            ansible-playbook -i inventory.txt .circleci/ansible/configure-server.yml
#            echo ENVIRONMENT=production > backend/.env
#            echo NODE_ENV=production >> backend/.env
#            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
#            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
#            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
#            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
#            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
#            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
#            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
#            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
#            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env

      - slack/notify:
          event: fail
          mentions: '@ignacio.paricio'
          template: basic_fail_1
      # Here's where you will add some code to rollback on failure

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations >> migrations_log.txt
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            if grep "has been executed successfully" migrations_log.txt;
            then curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}; \
            fi
     # Here's where you will add some code to rollback on failure
      - revert-migrations
  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install tar gzip
            # Install nodejs on Fedora Core based on nodesource website instructions
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url # was stored in inventory.txt in deploy-infrastructure
          command: |
            # your code here
            BACKEND_IP=`head -1 inventory.txt`
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm install
            npm run build
      - run:
          name: Copy to S3
          command: |
            aws s3 cp ./frontend/dist s3://udapeople-${CIRCLE_WORKFLOW_ID}/ --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["53:ed:0d:b2:e2:aa:fa:ec:8b:bd:af:c4:d6:6e:f8:d8"]
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            apk add tar gzip
            apk add curl
            apk add gzip
            apk add nodejs
            apk add npm
            pip install awscli
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Deploy backend
          command: |
            # your code here
#            cd .circleci/ansible
            ansible-playbook -i inventory.txt .circleci/ansible/deploy-backend.yml
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add tar gzip curl
            pip install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            # your code here
            BACKEND_IP=`head -1 .circleci/ansible/inventory.txt`
      - run:
          name: Backend smoke test.
          command: |
            # your code here
            echo "BACKEND_IP: ${BACKEND_IP}"
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3.website.us-east-2.amazonaws.com"
            if curl -s ${URL} | grep "Welcome"
            then
            return 1
            else
            return 0
            fi
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}
      - revert-migrations

  #cloudfront-update:
    #docker:
      ## Docker image here that supports AWS CLI
    #steps:
      ## Checkout code from git
      #- run:
          #name: Install dependencies
          #command: |
            ## your code here
      #- run:
          #name: Update cloudfront distribution
          #command: |
            ## your code here
      ## Here's where you will add some code to rollback on failure
#      - destroy-environment:
#          workflow_id: ${CIRCLE_WORKFLOW_ID}
#      - revert-migrations

#cleanup:
    #docker:
      ## Docker image here
    #steps:
      ## Checkout code from git
      #- run:
          #name: Get old stack workflow id
          #command: |
            ## your code here
            #export OldWorkflowID="the id here"
            #export STACKS=[] #put the list of stacks here
      #- run:
          #name: Remove old stacks and files
          #command: |
            #if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            #then
              ## your code here
            #fi
            

workflows:
  default:
    jobs:
#      - build-frontend
#      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
      - deploy-infrastructure:
          #requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      #- cloudfront-update:
          #requires: [smoke-test]
      #- cleanup:
          #requires: [cloudfront-update]